// jQuery Mask Plugin v1.13.4
// github.com/igorescobar/jQuery-Mask-Plugin
! function(t) { "function" == typeof define && define.amd ? define(["jquery"], t) : "object" == typeof exports ? module.exports = t(require("jquery")) : t(jQuery || Zepto) }(function(c) {
    function o(s, k, d) {
        s = c(s);
        var a, g = this,
            o = s.val();
        k = "function" == typeof k ? k(s.val(), void 0, s, d) : k;
        var m = {
            invalid: [],
            getCaret: function() {
                try {
                    var t, a = 0,
                        e = s.get(0),
                        n = document.selection,
                        r = e.selectionStart;
                    return n && -1 === navigator.appVersion.indexOf("MSIE 10") ? ((t = n.createRange()).moveStart("character", s.is("input") ? -s.val().length : -s.text().length), a = t.text.length) : !r && "0" !== r || (a = r), a
                } catch (t) {}
            },
            setCaret: function(t) {
                try {
                    if (s.is(":focus")) {
                        var a, e = s.get(0);
                        e.setSelectionRange ? e.setSelectionRange(t, t) : e.createTextRange && ((a = e.createTextRange()).collapse(!0), a.moveEnd("character", t), a.moveStart("character", t), a.select())
                    }
                } catch (t) {}
            },
            events: function() { s.on("input.mask keyup.mask", m.behaviour).on("paste.mask drop.mask", function() { setTimeout(function() { s.keydown().keyup() }, 100) }).on("change.mask", function() { s.data("changed", !0) }).on("blur.mask", function() { o === s.val() || s.data("changed") || s.triggerHandler("change"), s.data("changed", !1) }).on("blur.mask", function() { o = s.val() }).on("focus.mask", function(t) {!0 === d.selectOnFocus && c(t.target).select() }).on("focusout.mask", function() { d.clearIfNotMatch && !a.test(m.val()) && m.val("") }) },
            getRegexMask: function() { for (var t, a, e, n, r = [], s = 0; s < k.length; s++)(t = g.translation[k.charAt(s)]) ? (a = t.pattern.toString().replace(/.{1}$|^.{1}/g, ""), e = t.optional, (t = t.recursive) ? (r.push(k.charAt(s)), n = { digit: k.charAt(s), pattern: a }) : r.push(e || t ? a + "?" : a)) : r.push(k.charAt(s).replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")); return r = r.join(""), n && (r = r.replace(new RegExp("(" + n.digit + "(.*" + n.digit + ")?)"), "($1)?").replace(new RegExp(n.digit, "g"), n.pattern)), new RegExp(r) },
            destroyEvents: function() { s.off("input keydown keyup paste drop blur focusout ".split(" ").join(".mask ")) },
            val: function(t) { var a = s.is("input") ? "val" : "text"; return a = 0 < arguments.length ? (s[a]() !== t && s[a](t), s) : s[a]() },
            getMCharsBeforeCount: function(t, a) { for (var e = 0, n = 0, r = k.length; n < r && n < t; n++) g.translation[k.charAt(n)] || (t = a ? t + 1 : t, e++); return e },
            caretPos: function(t, a, e, n) { return g.translation[k.charAt(Math.min(t - 1, k.length - 1))] ? Math.min(t + e - a - n, e) : m.caretPos(t + 1, a, e, n) },
            behaviour: function(t) {
                t = t || window.event, m.invalid = [];
                var a = t.keyCode || t.which;
                if (-1 === c.inArray(a, g.byPassKeys)) {
                    var e = m.getCaret(),
                        n = m.val().length,
                        r = e < n,
                        s = m.getMasked(),
                        o = s.length,
                        i = m.getMCharsBeforeCount(o - 1) - m.getMCharsBeforeCount(n - 1);
                    return m.val(s), !r || 65 === a && t.ctrlKey || (8 !== a && 46 !== a && (e = m.caretPos(e, n, o, i)), m.setCaret(e)), m.callbacks(t)
                }
            },
            getMasked: function(t) {
                var a, e, n = [],
                    r = m.val(),
                    s = 0,
                    o = k.length,
                    i = 0,
                    c = r.length,
                    l = 1,
                    u = "push",
                    h = -1;
                for (e = d.reverse ? (u = "unshift", l = -1, a = 0, s = o - 1, i = c - 1, function() { return -1 < s && -1 < i }) : (a = o - 1, function() { return s < o && i < c }); e();) {
                    var f = k.charAt(s),
                        p = r.charAt(i),
                        v = g.translation[f];
                    v ? (p.match(v.pattern) ? (n[u](p), v.recursive && (-1 === h ? h = s : s === a && (s = h - l), a === h && (s -= l)), s += l) : v.optional ? (s += l, i -= l) : v.fallback ? (n[u](v.fallback), s += l, i -= l) : m.invalid.push({ p: i, v: p, e: v.pattern }), i += l) : (t || n[u](f), p === f && (i += l), s += l)
                }
                return t = k.charAt(a), o !== c + 1 || g.translation[t] || n.push(t), n.join("")
            },
            callbacks: function(t) {
                function a(t, a, e) { "function" == typeof d[t] && a && d[t].apply(this, e) }
                var e = m.val(),
                    n = e !== o,
                    r = [e, t, s, d];
                a("onChange", !0 == n, r), a("onKeyPress", !0 == n, r), a("onComplete", e.length === k.length, r), a("onInvalid", 0 < m.invalid.length, [e, t, s, m.invalid, d])
            }
        };
        g.mask = k, g.options = d, g.remove = function() { var t = m.getCaret(); return m.destroyEvents(), m.val(g.getCleanVal()), m.setCaret(t - m.getMCharsBeforeCount(t)), s }, g.getCleanVal = function() { return m.getMasked(!0) }, g.init = function(t) { t = t || !1, d = d || {}, g.byPassKeys = c.jMaskGlobals.byPassKeys, g.translation = c.jMaskGlobals.translation, g.translation = c.extend({}, g.translation, d.translation), g = c.extend(!0, {}, g, d), a = m.getRegexMask(), !1 === t ? (d.placeholder && s.attr("placeholder", d.placeholder), c("input").length && !1 == "oninput" in c("input")[0] && "on" === s.attr("autocomplete") && s.attr("autocomplete", "off"), m.destroyEvents(), m.events(), t = m.getCaret(), m.val(m.getMasked()), m.setCaret(t + m.getMCharsBeforeCount(t, !0))) : (m.events(), m.val(m.getMasked())) }, g.init(!s.is("input"))
    }
    c.maskWatchers = {};

    function a() {
        var t = c(this),
            a = {},
            e = t.attr("data-mask");
        if (t.attr("data-mask-reverse") && (a.reverse = !0), t.attr("data-mask-clearifnotmatch") && (a.clearIfNotMatch = !0), "true" === t.attr("data-mask-selectonfocus") && (a.selectOnFocus = !0), i(t, e, a)) return t.data("mask", new o(this, e, a))
    }
    var i = function(t, a, e) {
        e = e || {};
        var n = c(t).data("mask"),
            r = JSON.stringify;
        t = c(t).val() || c(t).text();
        try { return "function" == typeof a && (a = a(t)), "object" != typeof n || r(n.options) !== r(e) || n.mask !== a } catch (t) {}
    };
    c.fn.mask = function(t, a) {
        a = a || {};

        function e() { if (i(this, t, a)) return c(this).data("mask", new o(this, t, a)) }
        var n = this.selector,
            r = c.jMaskGlobals,
            s = c.jMaskGlobals.watchInterval;
        return c(this).each(e), n && "" !== n && r.watchInputs && (clearInterval(c.maskWatchers[n]), c.maskWatchers[n] = setInterval(function() { c(document).find(n).each(e) }, s)), this
    }, c.fn.unmask = function() {
        return clearInterval(c.maskWatchers[this.selector]), delete c.maskWatchers[this.selector], this.each(function() {
            var t = c(this).data("mask");
            t && t.remove().removeData("mask")
        })
    }, c.fn.cleanVal = function() { return this.data("mask").getCleanVal() };
    var t = {
        maskElements: "input,td,span,div",
        dataMaskAttr: "*[data-mask]",
        dataMask: !0,
        watchInterval: 300,
        watchInputs: !0,
        watchDataMask: !(c.applyDataMask = function(t) {
            ((t = t || c.jMaskGlobals.maskElements) instanceof c ? t : c(t)).filter(c.jMaskGlobals.dataMaskAttr).each(a)
        }),
        byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91],
        translation: { 0: { pattern: /\d/ }, 9: { pattern: /\d/, optional: !0 }, "#": { pattern: /\d/, recursive: !0 }, A: { pattern: /[a-zA-Z0-9]/ }, S: { pattern: /[a-zA-Z]/ } }
    };
    c.jMaskGlobals = c.jMaskGlobals || {}, (t = c.jMaskGlobals = c.extend(!0, {}, t, c.jMaskGlobals)).dataMask && c.applyDataMask(), setInterval(function() { c.jMaskGlobals.watchDataMask && c.applyDataMask() }, t.watchInterval)
});